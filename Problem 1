#Word Break

#The time complexity of this solution is O(n^2), where n is the length of the string s, because we have two nested loops. 
#The space complexity is O(n) for the dp array.

class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        word_set = set(wordDict)
        n = len(s)
        dp = [False] * (n + 1)
        dp[0] = True

        for i in range(1, n + 1):
            for j in range(i):
                if dp[j] and s[j:i] in word_set:
                    dp[i] = True
                    break

        return dp[n]

        
