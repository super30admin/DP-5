// DP

// Time Complexity : O(L * L) L is the length of the string
// Space Complexity : O(L)
// Did this code successfully run in leetcode : Yes
// Any problems faced : No

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {

        // adding list to set to reduce TC
        unordered_set<string> set;
        for(auto s : wordDict) {
            set.insert(s);
        }

        vector<bool> dp(s.size() + 1); // extra index to check for comp word
        dp[0] = true; // string before first char can be split into valid strings (empty)

        for(int i = 1; i < dp.size(); i++) {
            for(int j = 0; j < i; j++) {
                string sub = s.substr(j, i - j);
                if(dp[j] && (set.find(sub) != set.end())) { // if the substring is found in given dict
                    // if dp[j] is F, substr before it cannot be split into valid substr

                    dp[i] = true;
                    break;
                }
            }
        }
        for(auto c : dp) {
            cout << c << " ";
        }
        return dp[s.size()];
    }
};