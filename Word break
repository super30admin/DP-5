Approach 1 : find all substrings and check if it is in the list. Improved Brute Force by checking the first substring is valid or not then don't need to split the rest substring related
to that split.
Time Complexity : O(n^n)
Space Complexity :
class Solution {
    HashSet<String> set; // Hashset out of the //list wordDict for better access
    public boolean wordBreak(String s, List<String> wordDict) {
        if(s==null || s.length()==0) return false;
        set=new HashSet<>(wordDict);
        return helper(s);               
    }
    public boolean helper(String s){
        //Base Case
        if(s.length()==0) return true;
        // Logic
        for(int i=0;i<s.length();i++){
            if(set.contains(s.substring(0,i+1)) && helper(s.substring(i+1))){
                return true;
            }
            
        }
        return false;
    }
}
Approach 2 : Dyamic programming
Time Complexity : O(n*3)
Space Complexity :
class Solution {
    
    public boolean wordBreak(String s, List<String> wordDict) {
        HashSet<String> set=new HashSet<>(wordDict);
        int n=s.length();
        boolean[] dp= new boolean[n+1]; // One more index at the end
        dp[0]=true;
        for(int i=0;i<n+1;i++){
            for (int j=0;j<i;j++){
                if(dp[j] && set.contains(s.substring(j,i))){
                    dp[i]=true;
                    break;                    
                }                
            }
        }
        return dp[dp.length-1];        
    }
}
