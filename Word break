//TC:- n^3 (n^2 for nested traversal and n for substring)
//SC:- n

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        รฅรง
        HashSet<String> set = new HashSet<>(wordDict);
        int [] dp = new int [s.length()+1];
        
        for(int i=0; i<=s.length(); i++)
        {
            String currString = s.substring(0,i);
            
            if(!set.contains(currString)) 
            {
                for(int j = 1; j<i; j++)
                {
                    if(dp[j] == 1 && set.contains(s.substring(j,i)))
                    {
                        dp[i] = 1;
                        break;
                    }
                }
            }
            else
            {
                dp[i]=1;
            }
        }
        
        return dp[s.length()]==1;
    }
}
