* Time Complexity :  O(n^2 + m) where n is the length of the string and m is the number of words in dictionary
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

// Your code here along with comments explaining your approach
class Solution {
    public int uniquePaths(int m, int n) {
        int unique[][] = new int[m][n];

        for (int i = 0; i < n; i++) {
            unique[0][i] = 1;
        }

        for (int i = 0; i < m; i++) {
            unique[i][0] = 1;
        }

        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                unique[i][j] = unique[i-1][j] + unique[i][j-1];
            }
        }

        return unique[m-1][n-1];
    }
}