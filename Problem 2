Unique Paths

#The time complexity of this solution is O(m * n) because we iterate through the entire grid once to calculate the number of unique paths for each cell. 
#The space complexity is also O(m * n) because we use a 2D array of size m x n to store the intermediate results.

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        # Create a 2D array to store the number of unique paths to reach each cell
        dp = [[0] * n for _ in range(m)]
        
        # Initialize the first row and first column with 1 because there's only one way to reach them
        for i in range(m):
            dp[i][0] = 1
        for j in range(n):
            dp[0][j] = 1
        
        # Calculate the number of unique paths for each cell based on the above logic
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
        
        # Return the number of unique paths to reach the bottom-right corner
        return dp[m-1][n-1]
