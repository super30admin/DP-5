Time complexity: O(n^n)
Space complexity: O(n)
Did this code successfully submitted on leetcode: Yes

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        
        boolean[] out = new boolean[s.length()+1];
        out[0]=true;
        
        Set<String> set = new HashSet<>();
        
        for(String word : wordDict){
            set.add(word);
        }
        
        for(int i=1; i<=s.length();i++){
            for(int j=0; j<i;j++){
                if(out[j] && set.contains(s.substring(j,i))){
                    out[i]=true;
                    break;
                }
            }
        }
        
        return out[s.length()];
    }
}
